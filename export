#!/usr/bin/env ruby

require "bundler/setup"
require "active_record"
require "yaml"
require "open3"
require "time"
require "htmlentities"

class Post < ActiveRecord::Base
  self.table_name = "textpattern"
  self.primary_key = "ID"

  STATUS = %w[ _ draft hidden pending live sticky ]

  def metadata
    {
      :id         => self.id,
      :posted_at  => self.Posted,
      :updated_at => self.LastMod || self.Posted,
      :title      => HTMLEntities.new.decode(self.Title),
      :section    => self.Section,
      :slug       => self.url_title,
      :format     => "html",
      :comments   => self.Annotate == 1,
      :status     => STATUS[self.Status]
    }
  end

  def body
    self.Body_html
  end
end

class Comment < ActiveRecord::Base
  self.table_name = "txp_discuss"
  self.primary_key = "discussid"

  def metadata
    {
      :id         => self.id,
      :post_id    => self.parentid,
      :name       => self.name,
      :email      => self.email,
      :url        => self.web,
      :ip_address => self.ip,
      :posted_at  => self.posted,
      :visible    => self.visible,
      :format     => "html",
      :user_agent => self.useragent
    }
  end

  def body
    ("<p>" + self.message.strip + "</p>").
      gsub(%r!(?:<br\s?/?>\s*){2}!, "</p><p>").
      gsub(%r!<p>\s*<p>!, "<p>").
      gsub(%r!</p>\s*</p>!, "</p>")
  end
end

def tidy(html)
  stdin, stdout, stderr = Open3.popen3("tidy -q -asxml -utf8")
  stdin << html
  stdin.close
  stdout.read[%r!<body>(.*?)</body>!m, 1].strip.
    gsub(%r!(<pre[^>]*>)\s+!, "\\1").
    gsub(%r!\s+(</pre>)!, "\\1")
end

def format_value(v)
  case v
  when Time
    v.utc.xmlschema
  when String
    v.gsub(/\\/, "\\\\\\\\").gsub(/\n/, "\\\\n")
  else
    v
  end
end

def headers(hash)
  hash.map{ |k, v| [k, format_value(v)].join(": ") }.join("\n")
end

config = YAML.load(File.read("config.yaml"))
ActiveRecord::Base.establish_connection config[:database]

Comment.all.each do |comment|
  filename = "content/comments/%06d-%06d" % [comment.metadata[:post_id], comment.metadata[:id]]
  FileUtils.mkdir_p File.dirname(filename)
  File.open filename, "w" do |f|
    f.puts headers(comment.metadata), "", tidy(comment.body)
  end
end

Post.all.each do |post|
  filename = "content/posts/%s/%06d-%s" % [post.metadata[:section], post.metadata[:id], post.metadata[:slug]]
  FileUtils.mkdir_p File.dirname(filename)
  File.open filename, "w" do |f|
    f.puts headers(post.metadata), "", tidy(post.body)
  end
end
